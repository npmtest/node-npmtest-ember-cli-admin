{"/home/travis/build/npmtest/node-npmtest-ember-cli-admin/test.js":"/* istanbul instrument in package npmtest_ember_cli_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/lib.npmtest_ember_cli_admin.js":"/* istanbul instrument in package npmtest_ember_cli_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_admin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_admin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-admin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_admin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_admin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_admin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_admin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_admin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_admin.__dirname + '/lib.npmtest_ember_cli_admin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/index.js":"var path = require('path');\nvar Funnel = require('broccoli-funnel');\n\nmodule.exports = {\n  name: 'ember-cli-admin',\n\n  included: function(app) {\n    this.app = app;\n    app.import(app.bowerDirectory + '/bootstrap-sass-official/assets/javascripts/bootstrap.js');\n    app.import('vendor/fileicon.png', { destDir: 'assets/images' });\n    app.import(app.bowerDirectory + '/typeahead.js/dist/bloodhound.min.js');\n    app.import(app.bowerDirectory + '/typeahead.js/dist/typeahead.jquery.js');\n    app.import(app.bowerDirectory + '/jquery-ui-sortable/jquery-ui-sortable.js');\n    app.import(app.bowerDirectory + '/jquery-ui-touch-punch-improved/jquery.ui.touch-punch-improved.js');\n    app.import('vendor/nested-sortable.js');\n  },\n\n  treeForPublic: function() {\n    var bootstrapFonts = path.join(this.app.bowerDirectory, '/bootstrap-sass-official/assets/fonts/bootstrap');\n    var bootstrapFontsTree = new Funnel(this.treeGenerator(bootstrapFonts), {\n      srcDir: '/',\n      destDir: '/fonts/bootstrap'\n    });\n\n    return bootstrapFontsTree;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/admin-resolver.js":"/*global require*/\nimport Resolver from 'ember/resolver';\nimport Ember from 'ember';\n\nexport default Resolver.extend({\n  resolveRoute: function(parsedName) {\n    var module, moduleName;\n    moduleName = `${this.namespace.modulePrefix}/routes/main`;\n    this.useRouterNaming(parsedName);\n    if (this.resolveOther(parsedName)) {\n      return this.resolveOther(parsedName);\n    } else {\n      if (!this._checkRouteName(parsedName.fullName)) {\n        module = require(moduleName, null, null, true);\n        if (module['default']) {\n          module = module['default'];\n        }\n        return module;\n      }\n    }\n  },\n  resolveController: function(parsedName) {\n    this.useRouterNaming(parsedName);\n    if (this._checkResourceController(parsedName.fullName)) {\n      this._setNames(parsedName);\n    }\n    if (this.resolveOther(parsedName)) {\n      return this.resolveOther(parsedName);\n    }\n    return this._super(parsedName);\n  },\n  _checkRouteName: function(name) {\n    return Ember.String.w('route:application route:basic route:loading route:error').indexOf(name) >= 0;\n  },\n  _checkResourceController: function(name) {\n    return this._pattern().test(name);\n  },\n  _replaceForResource: function(name) {\n    return name.replace(this._pattern(), '');\n  },\n  _setNames: function(parsedName) {\n    parsedName.fullName = this._replaceForResource(parsedName.fullName);\n    parsedName.fullNameWithoutType = this._replaceForResource(parsedName.fullNameWithoutType);\n    parsedName.name = this._replaceForResource(parsedName.name);\n  },\n  _pattern: function() {\n    return /(\\/[Ss]how)|(\\/[Ee]dit)|(\\/[Nn]ew)/;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/navigation.js":"export default function() {\n  /*\n   Dashboard page\n   You can owerride this if you don't use dashboard\n   */\n  this.navigate(\"Dashboard\", {\n    route: \"dashboard\"\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/config/ember-try.js":"module.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        'ember': 'components/ember#release',\n        'ember-data': '1.13.2'\n      },\n      resolutions: {\n        'ember': 'release',\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'components/ember#beta',\n        'ember-data': 'components/ember-data#beta'\n      },\n      resolutions: {\n        'ember': 'beta',\n        'ember-data': 'beta'\n      }\n    },\n    {\n      name: 'ember-canary',\n      dependencies: {\n        'ember': 'components/ember#canary',\n        'ember-data': 'components/ember-data#canary'\n      },\n      resolutions: {\n        'ember': 'canary',\n        'ember-data': 'canary'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n\treturn {};\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/lib/proccess-text-content.js":"var Promise = require('ember-cli/lib/ext/promise');\nvar fs = require('ember-cli/node_modules/fs-extra');\nvar path = require('path');\nvar writeFile = Promise.denodeify(fs.outputFile);\n\nvar replacePhrases = function(content, phrases){\n  var contentsToWrite = content;\n\n  return Object.keys(phrases).reduce(function(prev, next){\n    var contentMarkerIndex = contentsToWrite.indexOf(next);\n    if (contentMarkerIndex !== -1) {\n      var replaceIndex = contentMarkerIndex;\n\n      contentsToWrite = contentsToWrite.slice(0, replaceIndex) +\n        phrases[next] +\n        contentsToWrite.slice(replaceIndex + next.length);\n      return contentsToWrite;\n    }\n  }, \"\");\n};\n\nvar insertPhrases = function(content, phrases){\n  var contentsToWrite = content;\n\n  return Object.keys(phrases).reduce(function(prev, next){\n\n    var contentMarkerIndex = contentsToWrite.indexOf(next);\n    if (contentMarkerIndex !== -1) {\n      var insertIndex = contentMarkerIndex + next.length;\n\n      contentsToWrite = contentsToWrite.slice(0, insertIndex) +\n        phrases[next] +\n        contentsToWrite.slice(insertIndex);\n      return contentsToWrite;\n    }\n  }, \"\");\n};\nmodule.exports = {\n  processTextContent: function(pathRelativeToProjectRoot, commands) {\n    var fullPath = path.join(this.project.root, pathRelativeToProjectRoot);\n    var originalContents = '';\n\n    if (fs.existsSync(fullPath)) {\n      originalContents = fs.readFileSync(fullPath, {\n        encoding: 'utf8'\n      });\n    }\n\n    var contentsToWrite = originalContents;\n    if (commands.replace) {\n      contentsToWrite = replacePhrases(contentsToWrite, commands.replace);\n    }\n    if (commands.insert) {\n      contentsToWrite = insertPhrases(contentsToWrite, commands.insert);\n    }\n\n    var returnValue = {\n      path: fullPath,\n      originalContents: originalContents,\n      contents: contentsToWrite,\n      inserted: false\n    };\n\n    if (contentsToWrite !== originalContents) {\n      returnValue.inserted = true;\n\n      return writeFile(fullPath, contentsToWrite)\n        .then(function() {\n          return returnValue;\n\n        });\n    } else {\n      return Promise.resolve(returnValue);\n    }\n\n  },\n  renameFile: function(pathOld, pathNew){\n    var fullPathOld = path.join(this.project.root, pathOld);\n    var fullPathNew = path.join(this.project.root, pathNew);\n    fs.rename(fullPathOld, fullPathNew, function(error){\n      if(error) {\n        return;\n      }\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-action.js":"import Ember from 'ember';\nimport ConfirmationMixin from 'ember-cli-admin/mixins/views/confirmation';\nimport layout from '../templates/components/admin-action';\n\nexport default Ember.Component.extend(ConfirmationMixin, {\n  layout: layout,\n\n  classNameBindings: [\"class\"],\n  attributeBindings: [\"title\"],\n  \"class\": Ember.computed('action', {\n    get: function() {\n      return this.get('action.class');\n    }\n  }),\n  click: function() {\n    let model = this.get('model');\n    if (this.get('action.confirm')) {\n      return this._showConfirmation();\n    } else {\n      return this.sendAction(this.get('adminAction'), this.get('action.action'), model);\n    }\n  },\n  actions: {\n    confirm: function() {\n      var model;\n      model = this.get('model');\n      this.sendAction(this.get('adminAction'), this.get('action.action'), model);\n      return this._super();\n    }\n  },\n  action: Ember.computed('actionName', {\n    get: function() {\n      if (this.get('breadcrumbAction')) {\n        switch (this.get('breadcrumbAction')) {\n          case \"New\":\n            return this._findAction('New');\n          case \"Edit\":\n            return this._findAction('Edit');\n          case \"Destroy\":\n            return this._findAction('Delete');\n          case \"Show\":\n            return this._findAction('Show');\n          default:\n            return \"\";\n        }\n      } else {\n        return this.get('actionName');\n      }\n    }\n  }),\n  title: Ember.computed('action', {\n    get: function() {\n      return this.get('action.title');\n    }\n  }),\n  _findAction: function(title) {\n    return this.get('allActions').find(function(action) {\n      return action.title === title;\n    });\n  },\n  _findAdditionalActions: function(title) {\n    return this.get('additionalActions').find(function(action) {\n      return action.title === title;\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-batch-action.js":"import Ember from 'ember';\nimport ConfirmationMixin from 'ember-cli-admin/mixins/views/confirmation';\nimport layout from '../templates/components/admin-batch-action';\n\nexport default Ember.Component.extend(ConfirmationMixin, {\n  layout: layout,\n\n  tagName: \"li\",\n  click: function(event) {\n    event.preventDefault();\n    if (this.get('__batches.length') < 1) {\n      return;\n    }\n    if (this.get('action.confirm')) {\n      return this._showConfirmation({\n        batch: true\n      });\n    } else {\n      return this._batchAction();\n    }\n  },\n  _batchAction: function() {\n    return this.sendAction(this.get('baseBatchAction'), this.get('action.action'));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-batch-checkbox.js":"import Ember from 'ember';\n\nvar batchCheckbox = Ember.Checkbox.extend({\n  selectAll: false,\n  pushItem: Ember.observer('checked', function() {\n    if (this.get('selectAll')) {\n      return this._selectAllAction();\n    }\n    if (this.get('checked')) {\n      return this._addItem(this.get('context'));\n    } else {\n      return this.get('batches').removeObject(this.get('context'));\n    }\n  }),\n  observerForChangeBatchesCollection: Ember.observer('batches.[]', function() {\n    return Ember.run.later((function(_this) {\n      return function() {\n        if (_this.get('batches').length === 0 && _this.get('selectAll')) {\n          return _this.set('checked', false);\n        }\n      };\n    })(this), 300);\n  }),\n  _selectAllAction: function() {\n    this.set('batches', Ember.A());\n    if (!this.get('checked')) {\n      return;\n    }\n    return this.get('items').forEach((function(_this) {\n      return function(item) {\n        return _this._addItem(item);\n      };\n    })(this));\n  },\n  _addItem: function(item) {\n    if (this.get('batches').indexOf(item) < 0) {\n      return this.get('batches').pushObject(item);\n    }\n  },\n  changeBatchList: Ember.computed('batches.[]', {\n    get: function() {\n      if (this.get('selectAll')) {\n        return;\n      }\n      return this.get('batches').indexOf(this.get('context')) >= 0;\n    }\n  }),\n  createObserverOnBatch: Ember.on('didInsertElement', function() {\n    this.get('changeBatchList');\n    return this.addObserver(\"changeBatchList\", this, function() {\n      if (this.get('selectAll')) {\n        return;\n      }\n      if (this.get('changeBatchList')) {\n        return this.set('checked', true);\n      } else {\n        return this.set('checked', false);\n      }\n    });\n  })\n});\n\nbatchCheckbox.reopenClass({\n  isComponentFactory: true\n});\n\nexport default batchCheckbox;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-collection-tree.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-collection-tree';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  classNames: ['sortable_tree', 'nested_set', 'ui-sortable'],\n  tagName: 'ol',\n  children: Ember.computed('content', {\n    get: function() {\n      return this.get('content');\n    }\n  }),\n  initSortable: Ember.on('didInsertElement', function() {\n    var self;\n    this.$().nestedSortable({\n      handle: 'div',\n      listType: 'ol',\n      items: 'li',\n      toleranceElement: '.tree-item_wrap',\n      placeholder: 'placeholder'\n    });\n    self = this;\n    return this.$().on('sortupdate', function(event, ui) {\n      return self.rebuild.call(self, event, ui);\n    });\n  }),\n  rebuild: function(event, ui) {\n    var item, itemId, itemObject, nextId, parentId, prevId;\n    item = ui.item;\n    itemId = item.data('id');\n    prevId = item.prev().data('id');\n    nextId = item.next().data('id');\n    parentId = item.parent().parent().data('id');\n    itemObject = this.get('items').find(function(item) {\n      return item.id.toString() === itemId.toString();\n    });\n    this.sendAction(this.get('rebuildAction'), itemObject, prevId, nextId, parentId);\n  },\n\n  actions:{\n    adminAction: function(adminActionName, item){\n      this.sendAction(this.get('adminAction'), adminActionName, item);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-drag-and-drop-zone.js":"import Ember from 'ember';\nimport Attributes from 'ember-cli-admin/dsl/attributes';\nimport layout from '../templates/components/admin-drag-and-drop-zone';\n\nconst { $ } = Ember;\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  attributeBindings: [\"property\", \"assetTemplate\"],\n\n  didInsertElement: function() {\n    var self = this;\n    this.$(\"#sortable\").sortable({\n      update: function() {\n        var positions = {};\n        $(this).find('.asset').each(function(i) {\n          positions[$(this).data('id')] = i + 1;\n        });\n        var assets = self.get('assets');\n        Object.keys(positions).forEach(function(id) {\n          var target = assets.filter(function(asset) {\n            return asset.get('id') === id;\n          })[0];\n          target.set(self.get('orderProperty'), positions[id]);\n          return target.save();\n        });\n      }\n    });\n    return this.get('single');\n  },\n  assetsSorted: Ember.computed('orderProperty', 'assets.length', {\n    get: function() {\n      if (Ember.isEmpty(this.get('assets')) || Ember.isEmpty(this.get('orderProperty'))) {\n        return this.get('assets');\n      }\n      return this.get('assets').toArray().sortBy(this.get('orderProperty'));\n    }\n  }),\n  single: Ember.computed('model', {\n    get: function() {\n      return Attributes.isBelongsTo(this.get(\"model\").constructor, this.get('property'));\n    }\n  }),\n  assets: Ember.computed('_assets', {\n    get: function() {\n      Ember.defineProperty(this, \"_assets\", Ember.computed(\"model.\" + this.get('property'), {\n        get: function(){\n          return this.get(\"model.\" + (this.get('property')));\n        }\n      }));\n      return this.get('_assets');\n    }\n  }),\n  asset: Ember.computed('_asset', {\n    get: function() {\n      Ember.defineProperty(this, \"_asset\", Ember.computed(\"model.\" + this.get('property') + \".isLoaded\", {\n        get: function() {\n          return this.get(\"model.\" + (this.get('property')));\n        }\n      }));\n      return this.get('_asset');\n    }\n  }),\n  assetRSVP: Ember.computed('asset', {\n    get: function() {\n      return new Ember.RSVP.Promise((function(_this) {\n        return function(resolve) {\n          return resolve(_this.get('asset'));\n        };\n      })(this));\n    }\n  }),\n  actions: {\n    adminAction: function(actionName, options){\n        this.sendAction(this.get('adminAction'), actionName, options);\n    },\n    selectFile: function(event) {\n      var file, files, _i, _len, _results;\n      if (!event) {\n        files = this.$('#filesource').get(0).files;\n      } else {\n        files = event.target.files;\n      }\n      _results = [];\n      for (_i = 0, _len = files.length; _i < _len; _i++) {\n        file = files[_i];\n        _results.push(this.createAsset(file));\n      }\n      return _results;\n    }\n  },\n  drop: function(e) {\n    var file, files, _i, _len, _results;\n    e.stopPropagation();\n    e.preventDefault();\n    files = e.dataTransfer.files;\n    _results = [];\n    for (_i = 0, _len = files.length; _i < _len; _i++) {\n      file = files[_i];\n      _results.push(this.createAsset(file));\n    }\n    return _results;\n  },\n  dragOver: function(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    return e.dataTransfer.dropEffect = 'copy';\n  },\n  dragLeave: function(e) {\n    e.stopPropagation();\n    return e.preventDefault();\n  },\n  dragEnter: function(e) {\n    e.stopPropagation();\n    return e.preventDefault();\n  },\n  createAsset: function(file) {\n    var asset;\n    this.set('creating', true);\n    if (this.get('single')) {\n      asset = this.get(\"model.\" + (this.get('property')));\n      if (asset) {\n        return this.get('assetRSVP').then((function(_this) {\n          return function(asset) {\n            if (asset) {\n              asset.destroyRecord();\n            }\n            return _this._createAsset(_this._params(file), file);\n          };\n        })(this));\n      } else {\n        return this._createAsset(this._params(file), file);\n      }\n    } else {\n      return this._createAsset(this._params(file), file);\n    }\n  },\n  _createAsset: function(params, file) {\n    var asset, store;\n    store = this.get('store');\n    asset = store.createRecord(Ember.String.singularize(this.get('property')), $.extend({}, params));\n    asset.set('file', file);\n    return this.sendAction(this.get(\"createAssetAction\"), asset, this.get('property'), this);\n  },\n  _params: function(file) {\n    var params;\n    params = {\n      assetable_type: Ember.String.classify(Ember.String.singularize(this.get('controllerName'))),\n      content_type: file.type,\n      original_filename: file.name,\n      is_main: true\n    };\n    if (this.get('model.id')) {\n      params.assetable_id = this.get('model.id');\n    }\n    if (!this.get('single')) {\n      params.is_main = false;\n    }\n    return params;\n  },\n  clearInput: function() {\n    return this.$().find(\"input[type=file]\").val('');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-input-errors.js":"import Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'span'\n});\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-input.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-input';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  classNameBindings: [\":admin-attribute\", \":form-group\", \"isAnyErrors:has-error\"],\n  type: Ember.computed('name', 'model', {\n    get: function() {\n      var transformedAttributes = Ember.get(this.get('model.constructor'), 'transformedAttributes');\n      if (Ember.isEmpty(this.get('value'))) {\n        return transformedAttributes.get(this.get('name'));\n      }\n\n      return Ember.typeOf(this.get('model').get(this.get('name')));\n    }\n  }),\n\n  isString: Ember.computed.equal('type', 'string'),\n\n  isEmail: Ember.computed('isString', {\n    get: function() {\n      if (this.get('isString') && this.get('value') && this.get('value').match(/.+@\\w+\\.\\w+/)) {\n        this.set('isString', false);\n        return true;\n      }\n      return false;\n    }\n  }),\n  isColor: Ember.computed('isString', {\n    get: function() {\n      if (this.get('isString') && this.get('value') && this.get('value').match(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/)) {\n        this.set('isString', false);\n        return true;\n      }\n      return false;\n    }\n  }),\n  isText: Ember.computed('isString', {\n    get: function() {\n      if (this.get('isString') && this.get('value') && this.get('value').length > 50) {\n        this.set('isString', false);\n        return true;\n      }\n      return false;\n    }\n  }),\n\n  isNumber: Ember.computed.equal('type', 'number'),\n  isBoolean: Ember.computed.equal('type', 'boolean'),\n  isDate: Ember.computed.equal('type', 'date'),\n\n  value: Ember.computed('name', 'model', {\n    set(key, value) {\n        this.get('model').set(this.get('name'), value);\n        return value;\n      },\n      get: function() {\n        return this.get('model').get(this.get('name'));\n      }\n  }),\n  isAnyErrors: Ember.computed.notEmpty('fieldErrors'),\n  fieldErrors: Ember.computed('model', 'model.errors.[]', {\n    get: function() {\n      return this.get('model.errors').errorsFor(this.get('name'));\n    }\n  })\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-item-tree.js":"import Ember from 'ember';\n\nexport default Ember.Component.extend({\n  layoutName: 'admin/base/tree/collection',\n  tagName: 'li',\n  attributeBindings: ['liId:data-id'],\n  liId: Ember.computed('item', {\n    get: function() {\n      return this.get('item').id;\n    }\n  }),\n\n  model: Ember.computed.alias('item'),\n\n  actions: {\n    adminAction: function(adminActionName, item) {\n      this.sendAction(this.get('adminAction'), adminActionName, item);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-letter-case.js":"import Ember from 'ember';\nimport LetterCaselogic from 'ember-cli-admin/logics/letter-case';\nimport layout from '../templates/components/admin-letter-case';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: 'span',\n\n  text: Ember.computed('content', 'caseType', {\n    get: function() {\n      return LetterCaselogic.transform(this.get('content'), this.get('caseType'));\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-navigation-menu.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-navigation-menu';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: \"li\",\n\n  classNameBindings: [\"isActive:active\"],\n\n  isActive: Ember.computed('content', 'content.children', 'origContext.activeMenu', {\n    get: function() {\n      if (this.get('content.route') === this.get('origContext.activeMenu')) {\n        return true;\n      }\n      return this._hasChild();\n    }\n  }),\n  url: Ember.computed('content.route', {\n    get: function() {\n      return `/#${this.get('content.route')}`;\n    }\n  }),\n  _hasChild: function() {\n    var hasChild;\n    if (!this.get('content.children')) {\n      return false;\n    }\n    hasChild = false;\n    this.get('content.children').forEach((function(_this) {\n      return function(item) {\n        if (item.route === _this.get('origContext.activeMenu')) {\n          return hasChild = true;\n        }\n      };\n    })(this));\n    return hasChild;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-pagination-number.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-pagination-number';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  attributeBindings: [\"href\"],\n  tagName: \"a\",\n  classNameBindings: [\"isActive:active\"],\n  href: '#',\n  isActive: Ember.computed('page', {\n    get: function () {\n      return this.get('page') === this.get('number');\n    }\n  }),\n  click: function(e) {\n    e.preventDefault();\n    if (this.get('number') !== '...') {\n      this.sendAction('action', this.get('number'));\n      return window.scrollTo(0, 0);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-pagination-pages.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-pagination-pages';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  currentPage: Ember.computed.alias(\"content.page\"),\n  numberOfPages: Ember.computed.alias(\"content.numberOfPages\"),\n\n  pageItems: Ember.computed(\"currentPage\", \"numberOfPages\", {\n    get: function() {\n      var currentPage = +(this.get(\"currentPage\"));\n      var totalPages = +(this.get(\"numberOfPages\"));\n\n      var res = [{\n        title: currentPage,\n        page: currentPage,\n        current: true\n      }];\n\n      var noSkipDistance = 5;\n\n      for (let i = currentPage - 1; i > 0;) {\n        if (currentPage - i < noSkipDistance || i === 1) {\n          res.unshift({\n            title: i,\n            page: i\n          });\n          i--;\n        } else {\n          let offset = i - currentPage;\n          res.unshift({\n            title: offset,\n            page: i\n          });\n          i = Math.max(currentPage + offset * 10, 1);\n        }\n      }\n\n      for (let i = currentPage + 1; i <= totalPages;) {\n        if (i - currentPage < noSkipDistance || i === totalPages) {\n          res.push({\n            title: i,\n            page: i\n          });\n          i++;\n        } else {\n          let offset = i - currentPage;\n          res.push({\n            title: '+' + offset,\n            page: i\n          });\n          i = Math.min(currentPage + offset * 10, totalPages);\n        }\n      }\n\n      return res;\n    }\n  }),\n\n  canStepForward: Ember.computed(\"currentPage\", \"numberOfPages\", {\n    get: function() {\n      var page = +(this.get(\"currentPage\"));\n      var totalPages = +(this.get(\"numberOfPages\"));\n      return page < totalPages;\n    }\n  }),\n\n  canStepBackward: Ember.computed(\"currentPage\", {\n    get: function() {\n      var page = +(this.get(\"currentPage\"));\n      return page > 1;\n    }\n  }),\n\n  onePage: Ember.computed('numberOfPages', {\n    get: function() {\n      var totalPages = +(this.get(\"numberOfPages\"));\n      return totalPages === 1;\n    }\n  }),\n\n  actions: {\n    clickPage: function(number) {\n      this.set(\"currentPage\", number);\n    },\n    changePage: function(num) {\n      var currentPage = +(this.get(\"currentPage\")),\n        totalPages = +(this.get(\"numberOfPages\"));\n\n      if (currentPage === totalPages && num === 1) {\n        return false;\n      }\n      if (currentPage <= 1 && num === -1) {\n        return false;\n      }\n      this.incrementProperty('currentPage', num);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-pagination-per-page.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-pagination-per-page';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: \"button\",\n\n  classNames: [\"btn btn-default\"],\n  attributeBindings: [\"type\"],\n  classNameBindings: [\"isActive:active\"],\n\n  click: function() {\n    return this.sendAction('action', this.get('count'));\n  },\n  isActive: Ember.computed('perPage', {\n    get: function() {\n      return this.get('perPage') === this.get('count');\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-radio-button.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-radio-button';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: \"input\",\n  type: \"radio\",\n\n  attributeBindings: [\"type\", \"checked:checked\"],\n\n  click: function() {\n    this.set(\"selection\", this.get('value'));\n  },\n  checked: Ember.computed('selection', {\n    get: function() {\n      return this.get(\"value\") === this.get(\"selection\");\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-select.js":"import Ember from \"ember\";\nimport layout from '../templates/components/admin-select';\n\nexport default Ember.Component.extend({\n  layout: layout,\n  tagName: 'select',\n\n  content: [],\n  selectedValue: null,\n\n  change() {\n    this._change();\n  },\n\n  _change() {\n    const selectedEl = this.$()[0];\n    let selectedIndex = selectedEl.selectedIndex;\n    if (this.get('prompt')) {\n      selectedIndex = selectedIndex - 1;\n    }\n    const content = this.get('content');\n    const selectedValue = content.toArray()[selectedIndex];\n    if (selectedValue) {\n      if (this.get('action')) {\n        this.sendAction('action', selectedValue);\n      } else {\n        this.set('selectedValue', selectedValue);\n      }\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-show-column-in-table.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-show-column-in-table';\n\nexport default Ember.Checkbox.extend({\n  layout: layout,\n\n  isComponentFactory: true,\n  isChecked: Ember.on('init', function() {\n    var attr = this.get('attribute');\n    var isChecked = Ember.tryInvoke(this.get('content'), 'isActive', [attr]);\n    this.set('checked', isChecked);\n  }),\n\n  click: function() {\n    var attr = this.get('attribute');\n    Ember.tryInvoke(this.get('content'), 'isActive', [attr,\n      this.get('checked')\n    ]);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-sort-th.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-sort-th';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: \"th\",\n\n  isOrderAscending: Ember.computed.bool('orderAscending'),\n  isCurrentSortAttribute: Ember.computed('sort', 'attributeName', {\n    get: function() {\n      return this.get('sort') === this.get('attributeName') && this.get('isInSortFields');\n    }\n  }),\n  isInSortFields: Ember.computed('sortFields', 'attributeName', {\n    get: function() {\n      return Ember.A(this.get('sortFields')).contains(this.get('attributeName'));\n    }\n  }),\n  click: function() {\n    return this.sendAction('action', this.get('attributeName'));\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-table-body.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-table-body';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: \"tbody\",\n  actions: {\n    adminAction: function(adminActionName, model) {\n      this.sendAction('adminAction', adminActionName, model);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-table-head.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-table-head';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: \"thead\",\n  actions: {\n    sort: function(attributeName){\n      this.sendAction('action', attributeName);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-td-element.js":"/*\nif you have own attr for display in relation you should change relations property\n\nif you have own image property you should change fileuploads property\n*/\n\nimport Ember from 'ember';\nimport Attributes from 'ember-cli-admin/dsl/attributes';\nimport layout from '../templates/components/admin-td-element';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  attributeBindings: [\"style\", 'data-column'],\n\n  relations: [\"name\", \"title\"],\n  fileuploads: [\"thumb_url\"],\n\n  tagName: \"td\",\n\n  'data-column': Ember.computed.alias('attributeName'),\n\n  style: Ember.computed('_style', {\n    get() {\n      let style = Ember.getWithDefault(this, '_style', \"\");  \n      return Ember.String.htmlSafe(style);\n    }\n  }),\n\n  createObserves: Ember.on('didInsertElement', function() {\n    if (this.get('item.fileuploads') && this.get('item.fileuploads').indexOf(this.get('attributeName')) >= 0) {\n      this.get('fileuploads').forEach((function(_this) {\n        return function(attr) {\n          return _this.addObserver(\"item.\" + (_this.get('attributeName')) + \".\" + attr, function() {\n            return this.notifyPropertyChange(\"value\");\n          });\n        };\n      })(this));\n      return;\n    }\n    if (Attributes.relations(this.get('item').constructor).indexOf(this.get('attributeName')) >= 0) {\n      this.get('relations').forEach((function(_this) {\n        return function(attr) {\n          return _this.addObserver(\"item.\" + (_this.get('attributeName')) + \".\" + attr, _this, function() {\n            return this.notifyPropertyChange(\"value\");\n          });\n        };\n      })(this));\n      return;\n    }\n    return this.addObserver(\"item.\" + (this.get('attributeName')), this, function() {\n      return this.notifyPropertyChange(\"value\");\n    });\n  }),\n  value: Ember.computed(\"item\", {\n    get: function() {\n      var record;\n      record = this.get(this.path());\n      if (!record || (!record['get'] || !record.get('id'))) {\n        return record;\n      }\n      return this.relation(record, this.get('attributeName'));\n    }\n  }),\n  image_object: Ember.computed('value', {\n    get: function() {\n      return this.get(\"item.\" + (this.get('attributeName')));\n    }\n  }),\n  color: Ember.computed('value', {\n    get: function() {\n      if (this.get('attributeName').match(/color/)) {\n        this.set('text', true);\n        return this.set('_style', `color:${this.get('_value')};`);\n      }\n    }\n  }),\n  image: Ember.computed('value', {\n    get: function() {\n      if (this.get('item.fileuploads') && this.get('item.fileuploads').indexOf(this.get('attributeName')) >= 0) {\n        this.set('text', false);\n        return true;\n      }\n    }\n  }),\n  text: Ember.computed('value', {\n    get: function() {\n      return true;\n    }\n  }),\n  path: function() {\n    return `item.${this.get('attributeName')}`;\n  },\n  relation: function(record) {\n    var value;\n    if (!record) {\n      return;\n    }\n    value = \"\";\n    if (this.get('item.fileuploads') && this.get('item.fileuploads').indexOf(this.get('attributeName')) >= 0) {\n      this.get('fileuploads').forEach(attr => {\n          if (record.get(attr)) {\n            return value = record.get(attr);\n          }\n      });\n    }\n    if (Attributes.relations(this.get('item').constructor).indexOf(this.get('attributeName')) >= 0) {\n      this.get('relations').forEach(attr => {\n          if (record.get(attr)) {\n            return value = record.get(attr);\n          }\n      });\n    }\n    return value;\n  },\n  actions: {\n    openImagePreview: function() {\n      return this.sendAction('adminAction', 'openImagePreview', this.get('image_object.url'));\n    }\n  },\n\n  //TODO: Do we need this?\n  itemActions: Ember.computed('allActions', {\n    get: function(){\n      console.log(this.get('allActions'));\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-tr-list.js":"import Ember from 'ember';\nimport layout from '../templates/components/admin-tr-list';\n\nexport default Ember.Component.extend({\n  layout: layout,\n\n  tagName: \"tr\",\n\n  actions: {\n    adminAction: function(adminActionName, model) {\n      this.sendAction('adminAction', adminActionName, model);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/components/admin-typeahead.js":"/*global Bloodhound*/\nimport Ember from 'ember';\nimport layout from '../templates/components/admin-typeahead';\n\nexport default Ember.TextField.extend({\n  layout: layout,\n\n  tagName: 'input',\n\n  classNames: ['typeahead'],\n  displayKey: 'value',\n  hint: true,\n  highlight: true,\n  minLength: 1,\n\n  //TODO: We need more customizable solution here\n  ajax: Ember.computed({\n    get: function() {\n      var session;\n      session = JSON.parse(localStorage.getItem('ember_simple_auth:session'));\n      if (!session) {\n        return {};\n      }\n      return {\n        headers: {\n          'Authorization': `Token user_token=\"${session.user_token}\", user_email=\"${session.user_email}\"`\n        }\n      };\n    }\n  }),\n  bloodhound: Ember.computed({\n    get: function() {\n      var self, states;\n      self = this;\n      states = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.obj.whitespace(\"value\"),\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        prefetch: false,\n        remote: {\n          url: `${self.get('url')}?q=%QUERY`,\n          ajax: this.get('ajax')\n        }\n      });\n      states.initialize();\n      return states;\n    }\n  }),\n  initComponent: Ember.on('didInsertElement', function() {\n    return this.$().typeahead(this.getProperties(['hint', 'highlight', 'minLength']), {\n      displayKey: this.get('displayKey'),\n      source: this.get('bloodhound').ttAdapter()\n    });\n  }),\n  destroyComponent: Ember.on('willDestroyElement', function() {\n    return this.$().typeahead('destroy');\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/dsl/attributes.js":"import Ember from 'ember';\nvar Attributes, attributes;\n\nattributes = Attributes = (function() {\n  function Attributes() {}\n\n  Attributes.detect = function(modelType) {\n    return this.withId(modelType);\n  };\n\n  Attributes.withId = function(modelType) {\n    var attrs;\n    attrs = this.withoutId(modelType);\n    attrs.unshift(\"id\");\n    return attrs;\n  };\n\n  Attributes.forSearch = function(modelType){\n    return this.withoutRelations(modelType);\n  };\n\n  Attributes.forSort = function(modelType){\n    var attributes = Ember.A(['id']);\n    attributes.pushObjects(this.withoutRelations(modelType));\n    return attributes;\n  };\n\n  Attributes.withoutRelations = function(modelType){\n    var attributes = Ember.A();\n    if(!modelType || !modelType['eachComputedProperty']){\n      return Ember.A();\n    }\n    modelType.eachComputedProperty((function(_this) {\n      return function(attribute, meta) {\n        if (meta.isAttribute && _this.systemAttrs(modelType).indexOf(attribute) < 0) {\n          return attributes.push(attribute);\n        }\n      };\n    })(this));\n    return attributes;\n  };\n\n  Attributes.withoutId = function(modelType) {\n    attributes = Ember.A();\n    modelType.eachComputedProperty((function(_this) {\n      return function(attribute, meta) {\n        if (meta.isAttribute && _this.systemAttrs(modelType).indexOf(attribute) < 0) {\n          return attributes.push(attribute);\n        }\n      };\n    })(this));\n    this.relations(modelType, attributes, false);\n    return attributes;\n  };\n\n  Attributes.relations = function(modelType, attrs, hasMany) {\n    if (attrs == null) {\n      attrs = Ember.A();\n    }\n    if (hasMany == null) {\n      hasMany = true;\n    }\n    if(!modelType ||!modelType['eachRelationship']){\n      return Ember.A();\n    }\n    modelType.eachRelationship((function() {\n      return function(attribute, meta) {\n        if (hasMany) {\n          return attrs.push(attribute);\n        } else {\n          if (meta.kind !== \"hasMany\") {\n            return attrs.push(attribute);\n          }\n        }\n      };\n    })(this));\n    return attrs;\n  };\n\n  Attributes.isBelongsTo = function(modelType, property) {\n    var _belongsTo;\n    _belongsTo = false;\n    modelType.eachRelationship((function() {\n      return function(attribute, meta) {\n        if (meta.key === property && meta.kind === \"belongsTo\") {\n          return _belongsTo = true;\n        }\n      };\n    })(this));\n    return _belongsTo;\n  };\n\n  Attributes.relationForType = function(modelType, relation) {\n    var type;\n    type = void 0;\n    modelType.eachRelationship((function() {\n      return function(attribute, meta) {\n        if (meta.key === relation) {\n          return type = meta.type;\n        }\n      };\n    })(this));\n    return type;\n  };\n\n  Attributes.systemAttrs = function() {\n    return Ember.A([\"created_at\", \"updated_at\"]);\n  };\n\n  return Attributes;\n\n})();\n\nexport default attributes;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/dsl/meta-route.js":"/**\n The `MetaRoute` class manages the application`s backend state and URLs. you can add a namespace\n by using a `path` option as the follow:\n\n ```javascript\n MetaRoute.map(Router, {path: \"/admin\"}, function() {\n  this.route(\"dashboard\"); //This will generate '/admin/dashboeard'\n  this.resources(\"users\");\n});\n ```\n\n The class has two functions: `route` and `resources`. The `route` is the\n same as `Ember.router`s route`, Refer to the [routing guide](http://emberjs.com/guides/routing/)\n for documentation. The `resources` is easy to use by passing a resource`s `name`.\n\n @class MetaRoute\n */\n\nvar MetaRoute, MetaRouteClass;\n\nMetaRouteClass = MetaRoute = (function() {\n  function MetaRoute() {}\n\n  MetaRoute.map = function(router, options, callback) {\n    if (arguments.length === 2 && typeof options === \"function\") {\n      callback = options;\n      options = {};\n    }\n\n    this.router = router;\n    this.path_prefix = options.path || \"\";\n\n    return callback.call(new MetaRouteClass());\n  };\n\n  MetaRoute.prototype.resources = function(name) {\n    var self;\n    self = this;\n\n    return MetaRouteClass.router.map(function() {\n\n      this.route(name, {\n        path: MetaRouteClass.path_prefix + \"/\" + name\n      });\n      this.route(\"\" + name + \".edit\", {\n        path: self._action_edit_path(name)\n      });\n      this.route(\"\" + name + \".show\", {\n        path: self._action_show_path(name)\n      });\n      return this.route(\"\" + name + \".new\", {\n        path: self._new_path(name)\n      });\n    });\n  };\n\n  MetaRoute.prototype.route = function(name, options, callback) {\n    var _isEmptyObject = function(obj) {\n      var name;\n      for (name in obj) {\n        return false;\n      }\n      return true;\n    };\n\n    if (arguments.length === 2 && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (arguments.length === 1) {\n      options = {};\n    }\n\n    if (_isEmptyObject(options)) {\n      options = {\n        path: MetaRouteClass.path_prefix + \"/\" + name\n      };\n    } else {\n      if (!!options.path) {\n        options = {\n          path: MetaRouteClass.path_prefix + \"/\" + options.path\n        };\n      }\n    }\n\n    return MetaRouteClass.router.map(function() {\n      this.route(name, options, callback);\n    });\n  };\n\n  MetaRoute.prototype._action_show_path = function(name) {\n    return MetaRouteClass.path_prefix + \"/\" + name + \"/:id/show\";\n  };\n\n  MetaRoute.prototype._action_edit_path = function(name) {\n    return MetaRouteClass.path_prefix + \"/\" + name + \"/:id/edit\";\n  };\n\n  MetaRoute.prototype._new_path = function(name) {\n    return MetaRouteClass.path_prefix + \"/\" + name + \"/new\";\n  };\n\n  return MetaRoute;\n\n})();\n\nexport default MetaRouteClass;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/dsl/navigation.js":"/*\n  This file create navigation menu in top\n\n  @navigate\n  @params:\n    @title - string\n    @options - hash\n    @nestedMenu - function\n\n  If you want use another main controller, you must set route param to \"\"\n  for example:\n    @navigate \"MyDashboard\", route: \"\"\n\n  When you want use Menu group:\n\n    @navigate \"Users\", ->\n      @navigate \"Admins\"\n      @navigate \"Managers\"\n\n  You can change url for menu when pass url params\n      @navigate \"Dashboard\", url: \"/my_dashboard\", route: \"my_dashboard\"\n\nparams:\n  url\n  route\n  divider true|false   -> default false\n */\n\n/*\n  for testing\n    @navigate \"System\", ->\n      @navigate \"Users\"\n      @navigate \"Settings\", divider: true\n */\nimport Ember from 'ember';\n\nconst { Object: EmberObject, String: EmberString, merge } = Ember;\nconst { dasherize } = EmberString;\n\nexport default class Navigation {\n  constructor(container, parentId) {\n    this.parentId = parentId;\n    this.container = container || [];\n  }\n\n  static map(callback) {\n    var navigation;\n    navigation = new Navigation();\n    callback.call(navigation);\n    return this.content = navigation.container;\n  }\n\n  navigate(title, options, callback) {\n    var emberObject, navigateObject;\n    navigateObject = {\n      title: title,\n      children: [],\n      divider: false,\n      id: this._uid()\n    };\n    if (this.parentId) {\n      navigateObject.parentId = this.parentId;\n    }\n    if (options && typeof options !== 'function') {\n      navigateObject = merge(navigateObject, options);\n    }\n    this._makeRoute(navigateObject);\n    emberObject = EmberObject.create(navigateObject);\n    this.container.push(emberObject);\n    if (typeof options === 'function') {\n      callback = options;\n    }\n    if (callback) {\n      emberObject.set('hasChildren', true);\n      callback.call(new Navigation(emberObject.get('children'), emberObject.get('id')));\n    }\n    return this.container;\n  }\n\n  _makeRoute(options) {\n    if (options == null) {\n      options = {};\n    }\n    if (options.route === void 0) {\n      return options.route = dasherize(options.title);\n    }\n  }\n\n  _uid() {\n    return Math.random().toString(36).substr(2, 9);\n  }\n\n  static findParent(obj) {\n    return this.content.find((function() {\n      return function(item) {\n        return item.id === obj.parentId;\n      };\n    })(this));\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/dsl/search.js":"import Ember from 'ember';\nimport Attributes from 'ember-cli-admin/dsl/attributes';\n\nvar SearchField;\n\nvar SearchClass = (function() {\n\n  function Search() {\n  }\n\n  Search.prototype.fields = Ember.A();\n  Search.prototype.model  = Ember.A();\n\n  Search.prototype.form = function(searchParams, callback) {\n    this.fields = Ember.A();\n    this.queryParams = this.deserializer(searchParams);\n    callback.call(this);\n    return this;\n  };\n\n  Search.prototype.fromModel = function(searchParams, model, attributes){\n    this.fields = Ember.A();\n    this.queryParams = this.deserializer(searchParams);\n    var fields = Ember.merge({}, attributes).fields;\n    if(!fields){\n      fields = Attributes.forSearch(model);\n    }\n    var self = this;\n    fields.forEach(function(attribute){\n      self.input(attribute);\n    });\n    return this;\n  };\n\n  Search.prototype.input = function(fieldName, options) {\n    var searchObject = SearchField.create({fieldName: fieldName, options: options, query: this.queryParams});\n    searchObject.input();\n    this.fields.pushObject(searchObject);\n    return this;\n  };\n\n  Search.prototype.autocomplete = function(fieldName, options) {\n    var searchObject = SearchField.create({fieldName: fieldName, options: options, query: this.queryParams});\n    searchObject.autocomplete();\n    this.fields.pushObject(searchObject);\n    return this;\n  };\n\n  Search.prototype.select = function(options, fieldName) {\n    var searchObject = SearchField.create({fieldName: fieldName, options: options, query: this.queryParams});\n    searchObject.select();\n    this.fields.pushObject(searchObject);\n    return this;\n  };\n\n  Search.prototype.serialize = function () {\n    var q = {};\n    this.fields.forEach(function (field) {\n      var json = field.serialize();\n      if (!Ember.isEmpty(json.value)) {\n        q[field.get('fieldName')] = json;\n      }\n    });\n    return q;\n  };\n\n  Search.prototype.deserializer = function(params){\n    var digitTest = /^\\d+$/,\n      keyBreaker = /([^\\[\\]]+)|(\\[\\])/g,\n      plus = /\\+/g,\n      paramTest = /([^?#]*)(#.*)?$/;\n    if(!params || !paramTest.test(params)) {\n      return {};\n    }\n\n\n    var data = {},\n      pairs = params.split('&'),\n      current;\n\n    for(var i = 0; i < pairs.length; i++){\n      current = data;\n      var pair = pairs[i].split('=');\n\n      // if we find foo=1+1=2\n      if(pair.length !== 2) {\n        pair = [pair[0], pair.slice(1).join(\"=\")];\n      }\n\n      var key = decodeURIComponent(pair[0].replace(plus, \" \")),\n        value = decodeURIComponent(pair[1].replace(plus, \" \")),\n        parts = key.match(keyBreaker);\n\n      for ( var j = 0; j < parts.length - 1; j++ ) {\n        var part = parts[j];\n        if (!current[part] ) {\n          // if what we are pointing to looks like an array\n          current[part] = digitTest.test(parts[j+1]) || parts[j+1] === \"[]\" ? [] : {};\n        }\n        current = current[part];\n      }\n      var lastPart = parts[parts.length - 1];\n      if(lastPart === \"[]\"){\n        current.pushObject(value);\n      }else{\n        current[lastPart] = value;\n      }\n    }\n    return data;\n  };\n\n  return Search;\n\n})();\n\nSearchField = Ember.Object.extend({\n  isInput: false,\n  isSelect: false,\n  isDate: false,\n  isAutocomplete: false,\n  isNumberInput: false,\n  options: {},\n  numberPredicats: ['=', '>=', '<='],\n\n  init: function(){\n    if(this.get('options')){\n      this.setProperties(this.get('options'));\n    }\n\n    var fieldParams = this.get('query')[this.get('fieldName')];\n    if(fieldParams){\n      this.setProperties(fieldParams);\n    }\n  },\n\n  input: function(){\n    var options = Ember.$.extend({type: 'string'}, this.get('options'));\n    this.set('options', options);\n\n    switch(this.get('options').type) {\n      case 'string':\n        this.set('isInput', true);\n        break;\n      case 'autocomplete':\n        this.autocomlete();\n        break;\n      case 'number':\n        this.numberInput();\n        break;\n      case 'select':\n        this.select();\n        break;\n      case 'date':\n        this.date();\n        break;\n      case 'boolean':\n        this.boolean();\n        break;\n      default:\n        throw('search dsl doesnt has default field');\n    }\n  },\n\n  numberInput: function(){\n    this.set('isNumberInput', true);\n  },\n  \n  boolean: function(){\n    this.set('isBoolean', true);\n  },\n\n  select: function(){\n    this.set('isSelect', true);\n  },\n\n  date: function(){\n    this.set('isDate', true);\n  },\n\n  autocomlete: function(){\n    this.set('isAutocomplete', true);\n  },\n\n  serialize: function(){\n    var serialzied;\n    switch(this.get('options').type){\n      case 'number':\n        serialzied = {value: this.get('value'), predicat: this.get('predicat')};\n        break;\n      default:\n        serialzied = {value: this.get('value')};\n        break;\n    }\n    return serialzied;\n  }\n});\n\nexport default SearchClass;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/logics/breadcrumbs.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nvar breadcrumbs;\n\nbreadcrumbs = Ember.Object.extend();\n\nbreadcrumbs.reopenClass({\n  setup: function(action, controller, model, breadcrumbsController) {\n    var content, name, obj;\n    content = Ember.A();\n    content.pushObject(this._dashboard());\n    obj = this._controllerLink(controller.get('breadcrumbName') || controller.get('_name'), controller.get('_name'));\n    content.pushObject(obj);\n    if (action && model) {\n      obj.set('class', \"\");\n      obj.set('active', false);\n      name = model.get('id') || action;\n      content.pushObject(this._controllerActionLink(name));\n    }\n    breadcrumbsController.set('content', content);\n    return this._actions(action, controller);\n  },\n  _url: function(url) {\n    return url;\n  },\n  _actions: function(action, controller) {\n    if(!controller.get('itemActions')){\n      return;\n    }\n\n    var actions;\n    actions = [];\n    switch (action) {\n      case \"edit\":\n        actions.push(this._createAction());\n        actions.push(this._showAction());\n        actions.push(this._destroyAction());\n        break;\n      case \"show\":\n        actions.push(this._createAction());\n        actions.push(this._editAction());\n        actions.push(this._destroyAction());\n        break;\n      default:\n        actions.push(this._createAction());\n    }\n    var controllerItemActions = controller.get('allActions').map(function(item){return item.title;});\n    actions = actions.filter(function(action){\n      return controllerItemActions.indexOf(action) >= 0;\n    });\n    return controller.set(\"__breadcrumbsActionsArray\", actions);\n  },\n  _createAction: function() {\n    return \"New\";\n  },\n  _editAction: function() {\n    return \"Edit\";\n  },\n  _destroyAction: function() {\n    return \"Destroy\";\n  },\n  _showAction: function() {\n    return \"Show\";\n  },\n\n  _dashboard: function(){\n    return Ember.Object.create({\n      name: \"dashboard\",\n      url: this._url(\"dashboard\"),\n      \"class\": \"first\",\n      active: false\n    });\n  },\n\n  _controllerLink: function(name, url){\n    return Ember.Object.create({\n      name: name,\n      url: url,\n      \"class\": \"active\",\n      active: true\n    });\n  },\n\n  _controllerActionLink: function(name){\n    return  Ember.Object.create({\n      name: name,\n      \"class\": \"active\",\n      active: true\n    });\n  }\n\n});\n\nexport default breadcrumbs;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/logics/letter-case.js":"import Ember from 'ember';\n\nvar letterCase = Ember.Object.extend();\n\nletterCase.reopenClass({\n  _firstLetterUpper: function(str) {\n    return str && str.toLowerCase().replace(/(^| )(\\w)/g, function(x) {\n      return x.toUpperCase();\n    });\n  },\n  titlize: function(str) {\n    if(!str){\n      return '';\n    }\n    return this._firstLetterUpper(str.replace(/(\\-)|(_)/g, \" \"));\n  },\n  transform: function(text, caseType){\n    switch(caseType) {\n      case 'lower':\n        return text.toLowerCase();\n      case 'upper':\n        return text.replace(/_/g, ' ').toUpperCase();\n      case 'title':\n        return this.titlize(text);\n      default:\n        return text;\n    }\n  }\n});\n\nexport default letterCase;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/logics/pagination.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nvar pagination;\n\npagination = Ember.Object.extend();\n\npagination.reopenClass({\n  setup: function(controller, page) {\n    var nextPage, prevPage;\n    if (page) {\n      nextPage = page + 1;\n      prevPage = page - 1 < 1 ? 1 : page - 1;\n      controller.set('__nextPage', nextPage);\n      return controller.set('__prevPage', prevPage);\n    } else {\n      controller.set('__nextPage', void 0);\n      return controller.set('__prevPage', void 0);\n    }\n  }\n});\n\nexport default pagination;\n\n// TODO do we need this?\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/logics/site-title.js":"import Ember from 'ember';\nvar siteTitle;\n\nsiteTitle = Ember.Object.extend();\n\nsiteTitle.reopenClass({\n  setup: function(controllerName, model, action) {\n    if (action) {\n      if (model.get('id')) {\n        return document.title = `${controllerName} - ${model.get('id')} - ${action}`;\n      } else {\n        return document.title = `${controllerName} - ${action}`;\n      }\n    } else {\n      return document.title = `${controllerName} - list`;\n    }\n  }\n});\n\nexport default siteTitle;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/fileupload-adapter.js":"import Ember from 'ember';\n\nconst {\n  Mixin,\n  RSVP,\n  Inflector,\n  $,\n  isEmpty,\n  merge,\n  run\n} = Ember;\n\nexport default Mixin.create({\n  createRecord: function(store, type, snapshot) {\n    let url;\n    url = this.buildURL(type.modelName, null, snapshot, 'createRecord');\n    return new RSVP.Promise((resolve, reject) => {\n      let data, str;\n      data = {};\n      store.serializerFor(type.modelName).serializeIntoHash(data, type, snapshot, {\n        includeId: true\n      });\n      const serializedType = Inflector.inflector.singularize(this.pathForType(type.modelName));\n      if (snapshot[\"_excludeParams\"]) {\n        str = $.param(snapshot._excludeParams(data[serializedType]));\n      } else {\n        str = $.param(data[serializedType]);\n      }\n      url = `${url}?${str}`;\n      data.context = this;\n\n      const ajaxOptions = this.ajaxOptions();\n      let params = {\n        'data': snapshot.record.get('file'),\n        'type': 'POST',\n        'processData': false,\n        'contentType': snapshot.attr('content_type')\n      };\n\n      if (!isEmpty(ajaxOptions)) {\n        params = merge(ajaxOptions, params);\n      }\n\n      return $.ajax(url, params).then(function(data){\n        run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null;\n        run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-action.js":"export { default } from 'ember-cli-admin/components/admin-action';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-batch-action.js":"export { default } from 'ember-cli-admin/components/admin-batch-action';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-batch-checkbox.js":"export { default } from 'ember-cli-admin/components/admin-batch-checkbox';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-collection-tree.js":"export { default } from 'ember-cli-admin/components/admin-collection-tree';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-drag-and-drop-zone.js":"export { default } from 'ember-cli-admin/components/admin-drag-and-drop-zone';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-input-errors.js":"export { default } from 'ember-cli-admin/components/admin-input-errors';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-input.js":"export { default } from 'ember-cli-admin/components/admin-input';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-item-tree.js":"export { default } from 'ember-cli-admin/components/admin-item-tree';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-letter-case.js":"export { default } from 'ember-cli-admin/components/admin-letter-case';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-navigation-menu.js":"export { default } from 'ember-cli-admin/components/admin-navigation-menu';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-pagination-number.js":"export { default } from 'ember-cli-admin/components/admin-pagination-number';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-pagination-pages.js":"export { default } from 'ember-cli-admin/components/admin-pagination-pages';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-pagination-per-page.js":"export { default } from 'ember-cli-admin/components/admin-pagination-per-page';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-radio-button.js":"export { default } from 'ember-cli-admin/components/admin-radio-button';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-select.js":"export { default } from 'ember-cli-admin/components/admin-select';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-show-column-in-table.js":"export { default } from 'ember-cli-admin/components/admin-show-column-in-table';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-sort-th.js":"export { default } from 'ember-cli-admin/components/admin-sort-th';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-table-body.js":"export { default } from 'ember-cli-admin/components/admin-table-body';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-table-head.js":"export { default } from 'ember-cli-admin/components/admin-table-head';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-td-element.js":"export { default } from 'ember-cli-admin/components/admin-td-element';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-tr-list.js":"export { default } from 'ember-cli-admin/components/admin-tr-list';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/components/admin-typeahead.js":"export { default } from 'ember-cli-admin/components/admin-typeahead';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/controllers/breadcrumbs.js":"import Ember from 'ember';\nimport config from '../config/environment';\n\nexport default Ember.Controller.extend({\n  caseType: config.EmberENV.caseType || 'title'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/controllers/dashboard.js":"import Ember from 'ember';\nexport default Ember.Controller.extend({\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/controllers/navigation.js":"import Ember from 'ember';\nimport config from '../config/environment';\nimport Navigation from 'ember-cli-admin/dsl/navigation';\nvar navigationController;\n\nnavigationController = Ember.Controller.extend({\n  activeMenu: \"dashboard\",\n  model: Navigation.content,\n  titleLinksTo: config.EmberENV.titleLinksTo || '/#/',\n  siteTitle: config.EmberENV.appName || config.modulePrefix || 'Ember Admin'\n});\n\nexport default navigationController;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/helpers/is-equal.js":"import Ember from \"ember\";\n\nexport default Ember.Helper.helper(function([leftSide, rightSide]) {\n  return leftSide === rightSide;\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/initializers/navigation.js":"import Navigation from 'ember-cli-admin/dsl/navigation';\nimport navigationMap from '../navigation';\n\nexport function initialize() {\n  return Navigation.map(navigationMap);\n};\n\nexport default {\n  name: 'navigation',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/initializers/table-settings-store-service.js":"export function initialize(container, application) {\n    application.inject('controller', 'tableSettingsStore',\n      'service:table-settings-store');\n};\n\nexport default {\n  name: 'table-settings-store-service',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/routes/dashboard.js":"import Ember from 'ember';\nimport BaseRoute from 'ember-cli-admin/mixins/routes/base';\nimport config from '../config/environment';\n\nexport default Ember.Route.extend(BaseRoute,{\n  // We use that redirect hook for redirection into the setted route in config file.\n  // Route is setted by property ENV.redirectFromDashboardTo.\n  redirect:function(model, transition) {\n    if(!Ember.isEmpty(config.redirectFromDashboardTo)){\n      this.transitionTo(config.redirectFromDashboardTo);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/app/services/table-settings-store.js":"import Ember from 'ember';\n\nexport default Ember.Service.extend({\n  persistence: window.localStorage,\n  isServiceFactory: true,\n\n  namespace: 'table-settings-store',\n\n  unknownProperty: function(key) {\n    var namespacedKey = this._key(key);\n    var payload = this.get('persistence').getItem(namespacedKey);\n    return this._deserialize(payload);\n  },\n\n  setUnknownProperty: function(key, value) {\n    var namespacedKey = this._key(key);\n    var payload = this._serialize(value);\n    this.get('persistence').setItem(namespacedKey, payload);\n    return true;\n  },\n\n  removeItem: function(key) {\n    this.get('persistence').removeItem(this._key(key));\n  },\n\n  _serialize: function(value) {\n    return JSON.stringify(value);\n  },\n\n  _deserialize: function(value) {\n    return JSON.parse(value);\n  },\n\n  _key: function(key) {\n    return `${this.get('namespace')}:${key}`;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/attributes.js":"import Ember from 'ember';\nimport Attributes from 'ember-cli-admin/dsl/attributes';\n\nexport default Ember.Mixin.create({\n  formAttributes: Ember.computed('modelAttributes.[]', {\n    get: function() {\n      return Attributes.withoutId(this.get(\"model\").constructor);\n    }\n  }),\n\n  showAttributes: Ember.computed('modelAttributes.[]', {\n    get: function(){\n      return Attributes.withoutId(this.get(\"model\").constructor);\n    }\n  }),\n\n  tableAttributes: Ember.computed('modelAttributes.[]', {\n    get: function() {\n      return this.get('modelAttributes');\n    }\n  }),\n\n  fileuploads: Ember.computed('model.fileuploads', {\n    get: function() {\n      if (this.get('model.fileuploads')) {\n        return this.get('model.fileuploads');\n      }\n    }\n  }),\n\n  activeTableAttributes: Ember.computed({\n    get: function() {\n      let type = this.toString().match(/:([^:]+)/)[1];\n      let hiddenAttributes = this.tableSettingsStore.get(type) || Ember.A();\n      let attributes = this.get('tableAttributes');\n      let returnValue = attributes.filter(function(attr) {\n        return !hiddenAttributes.some(function(hiddenAttr) {\n          return hiddenAttr === attr;\n        });\n      });\n      return returnValue;\n    }\n  }),\n\n  isActive: function(attribute, value) {\n    var model = attribute;\n    var currentController = this.get('_name');\n    var hiddenAttributes = this.tableSettingsStore.get(currentController) || Ember.A();\n    var isHidden = hiddenAttributes.some(function(attr) {\n      return attr === model;\n    });\n\n    if (value === undefined) {\n      return !isHidden;\n    } else {\n      if (isHidden) {\n        hiddenAttributes.splice(hiddenAttributes.indexOf(model), 1);\n      } else {\n        hiddenAttributes.push(model);\n      }\n      this.tableSettingsStore.set(currentController, hiddenAttributes);\n      this._setActiveAttributes(hiddenAttributes, {\n        async: true\n      });\n      return value;\n    }\n  },\n\n  _setActiveAttributes: function(hiddenAttributes, options) {\n    var attributes = this.get('tableAttributes');\n    var activeAttributes = attributes.filter(function(attr) {\n      return !hiddenAttributes.some(function(hiddenAttr) {\n        return hiddenAttr === attr;\n      });\n    });\n\n    if (options && options.async) {\n      window.setTimeout((function(_this) {\n        return function() {\n          _this.set('activeTableAttributes', activeAttributes);\n        };\n      })(this), 0);\n    } else {\n      this.set('activeTableAttributes', activeAttributes);\n    }\n  },\n\n  actions: {\n    openModalSettings: function() {\n      this.send('openModal', Ember.Object.extend({}),\n        'admin.base.filter-columns-modal');\n    }\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/base-actions.js":"// Generated by CoffeeScript 1.8.0\n\n/*\n  This is base controller for use in all views\n  If you wont add you action please override this actions\n  Or you can use additionalActions property!\n  for example:\n   In your controller\n    additionalActions:(->\n      [{title: \"my action\", class: \"btn my-action-css\", action: \"my\"}]\n    ).property()\n\n  use @@confirm property for show text in confirmation modal\n  @@action - is an action in your controller which pass model param\n\n   *for batch actions you don't need save model, because save call automatic when all objects\n\n   * for custom breadcrumbs actions you need override\n   breadcrumbsActions property and add action title, then add this action into additionalActions property\n */\nimport Ember from 'ember';\nvar baseActionsMixin;\n\nbaseActionsMixin = Ember.Mixin.create({\n\n  itemActions: [{\n    title: \"Edit\",\n    \"class\": \"btn btn-small btn-primary\",\n    action: \"edit\",\n    iconClass: \"glyphicon glyphicon-pencil\"\n  }, {\n    title: \"Show\",\n    \"class\": \"btn btn-small btn-success\",\n    action: \"show\",\n    iconClass: \"glyphicon glyphicon-info-sign\"\n  }, {\n    title: \"Delete\",\n    confirm: \"Are you sure you want to delete this?\",\n    \"class\": \"btn btn-small btn-danger\",\n    action: \"destroy\",\n    iconClass: \"glyphicon glyphicon-trash\"\n  }],\n  allActions: Ember.computed('actionNew', 'itemActions', {\n    get: function() {\n      let allActions = this.get('itemActions').concat([this.get('actionNew')]);\n      return Ember.A(allActions);\n    }\n  }),\n  actionNew: Ember.computed('model', {\n    get: function() {\n      return {\n        title: \"New\",\n        \"class\": \"btn btn-primary\",\n        action: \"new\",\n        iconClass: \"glyphicon glyphicon-plus\"\n      };\n    }\n  }),\n\n  breadcrumbsActions: Ember.computed('__breadcrumbsActionsArray', {\n    get: function() {\n      return this.get('__breadcrumbsActionsArray');\n    }\n  }),\n\n  actions: {\n    \"new\": function(model) {\n      return this._transitionToMetaRoute(model, \"new\");\n    },\n    edit: function(model) {\n      return this._transitionToMetaRoute(model, \"edit\");\n    },\n    update: function(model) {\n      return model.save();\n    },\n    destroy: function(model, batch) {\n      if (batch == null) {\n        batch = false;\n      }\n      if (this.get('model.__list')) {\n        model.deleteRecord();\n        this.get('model.items').removeObject(model);\n        if (!batch) {\n          this.get('__batches').removeObject(model);\n        }\n        return model.save();\n      } else {\n        return this._destroyItem(model);\n      }\n    },\n    show: function(model) {\n      return this._transitionToMetaRoute(model, \"show\");\n    },\n    adminAction: function(adminActionName, item) {\n      this.send(adminActionName, item);\n    }\n  },\n\n  _destroyItem: function(model) {\n    model.deleteRecord();\n    return model.save().then((function(_this) {\n      return function() {\n        return _this.transitionToRoute(_this.get('_name'));\n      };\n    })(this));\n  },\n\n  _transitionToMetaRoute: function(model, type) {\n    var result = null;\n\n    if (type) {\n      result = `${this.get('_name')}.${type}`;\n\n      if (type === 'new') {\n        return this.transitionToRoute(result);\n      } else {\n        return this.transitionToRoute(result, model.get('id'));\n      }\n    }\n\n    return this.transitionToRoute(`/${this.get('_name')}/${model}`);\n  }\n});\n\nexport default baseActionsMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/base.js":"import Ember from 'ember';\nimport BaseActionsMixin from 'ember-cli-admin/mixins/controllers/base-actions';\nimport FileUploadMixin from 'ember-cli-admin/mixins/controllers/fileupload';\nimport AttributesMixin from 'ember-cli-admin/mixins/controllers/attributes';\nimport PaginationMixin from 'ember-cli-admin/mixins/controllers/pagination';\nimport BatchActionsMixin from 'ember-cli-admin/mixins/controllers/batch-actions';\nimport FormActionsMixin from 'ember-cli-admin/mixins/controllers/form-actions';\nimport SearchMixin from 'ember-cli-admin/mixins/controllers/search';\nimport QueryParams from 'ember-cli-admin/mixins/controllers/query-params';\nimport SortMixin from 'ember-cli-admin/mixins/controllers/sort';\nimport SidebarMixin from 'ember-cli-admin/mixins/controllers/sidebar';\n\nvar baseMixin;\n\nbaseMixin = Ember.Mixin.create({\n  _name: Ember.computed({\n    get: function() {\n      return this._debugContainerKey.split(\":\")[1].replace(/(\\/[Ss]how)|(\\/[Ee]dit)|(\\/[Nn]ew)/, '');\n    }\n  })\n});\n\nbaseMixin.reopen(BaseActionsMixin, FileUploadMixin, AttributesMixin, QueryParams, PaginationMixin, BatchActionsMixin,\n  FormActionsMixin, SearchMixin, SortMixin, SidebarMixin);\n\nexport default baseMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/batch-actions.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  __batches: Ember.A(),\n  batchActions: Ember.A([{\n    title: \"delete\",\n    confirm: \"Are you sure you want to delete this?\",\n    action: \"destroy\"\n  }]),\n  actions: {\n    baseBatchAction(action) {\n      this.get('__batches').forEach(model => {\n        return this.send(action, model, true);\n      });\n      return this.set('__batches', Ember.A());\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/fileupload.js":"// Generated by CoffeeScript 1.8.0\n\n/*\n You can override this method for create your own logic for create asset\n */\nimport Ember from 'ember';\nimport DS from 'ember-data';\nvar fileUploadMixin;\n\nfileUploadMixin = Ember.Mixin.create({\n  actions: {\n    createAssetAction: function(asset, property, view) {\n      return asset.save().then((function(_this) {\n        return function() {\n          view.set('creating', false);\n          view.clearInput();\n          if (view.get('single')) {\n            return _this._createBelongsTo(asset, property);\n          } else {\n            return _this._createHasMany(asset, property);\n          }\n        };\n      })(this));\n    },\n    deleteAsset: function(options) {\n      var asset = options.asset;\n      var single = options.single;\n      var property = options.property;\n      var self = this;\n      asset.then(function(asset){\n        asset.destroyRecord();\n        if (single) {\n          return self._deleteBelongsTo(asset, property);\n        } else {\n          return self._deleteHasMany(asset, property);\n        }\n      });\n    }\n  },\n  _createBelongsTo: function(asset, property) {\n    var state;\n    this.get(\"model\").set(property, asset);\n    if (this.get('model.isDirty')) {\n      if (this.get('model.id')) {\n        state = DS.RootState.loaded.saved;\n        return this.get(\"model\").set('currentState', state);\n      }\n    }\n  },\n  _createHasMany: function(asset, property) {\n    return this.get(\"model.\" + property).pushObject(asset);\n  },\n  _deleteBelongsTo: function(asset, property) {\n    return asset.one('didDelete', (function(_this) {\n      return function() {\n        var state;\n        _this.get(\"model\").set(property, null);\n        if (_this.get('model.isDirty')) {\n          state = DS.RootState.loaded;\n          return _this.get(\"model\").set('currentState', state.saved);\n        }\n      };\n    })(this));\n  },\n  _deleteHasMany: function(asset, property) {\n    return this.get(\"model.\" + property).removeObject(asset);\n  }\n});\n\nexport default fileUploadMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/form-actions.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nvar formActionsMixin;\n\nformActionsMixin = Ember.Mixin.create({\n  actions: {\n    submit: function(redirect) {\n      if (redirect == null) {\n        redirect = true;\n      }\n      if (this.get('model.id')) {\n        return this._updateModel(redirect);\n      } else {\n        return this._createModel(redirect);\n      }\n    },\n    cancel: function() {\n      if (this.get('model.isDirty')) {\n        this.get('model').rollback();\n      }\n      return this._redirectToTable();\n    }\n  },\n  _redirectToTable: function() {\n    return window.history.back();\n  },\n  _updateModel: function(redirect) {\n    var model = this.get('model');\n    var self = this;\n    return model.save().then(function(){\n      if (redirect) {\n        return self._redirectToTable();\n      }\n    }, function(){});\n  },\n  _createModel: function(redirect) {\n    return this.get('model').save().then((function(_this) {\n      return function() {\n        if (redirect) {\n          return _this._redirectToTable();\n        } else {\n          return _this.send('edit', _this.get('model'));\n        }\n      };\n    })(this), function(){});\n  }\n});\n\nexport default formActionsMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/pagination.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nvar paginationMixin;\n\npaginationMixin = Ember.Mixin.create({\n\n  numberOfPages: Ember.computed('perPage', 'total', 'model', {\n    get: function() {\n      var total = this.get('total') || this.get('model').get('total');\n      return Math.ceil(total / this.get('perPage'));\n    }\n  }),\n\n  actions: {\n    changePerPage: function(perPage) {\n      return this.set('perPage', perPage);\n    }\n  }\n});\n\nexport default paginationMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/query-params.js":"import Ember from 'ember';\n\nvar queryParamsMixin;\n\nqueryParamsMixin = Ember.Mixin.create({\n  queryParams: ['page', 'perPage', 'q', 'sort', 'orderAscending'],\n  page: 1,\n  perPage: 25,\n  q: '',\n  sort: '',\n  orderAscending: false\n});\n\nexport default queryParamsMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/search.js":"// You can create your own search form with form dsl\n//  var search =  new SearchLogic().form(this.get('q'), function(){\n//    this.input('title');\n//    this.input('lat', {type: 'number'});\n//  });\n// Or you can use by default with your model\n\nimport Ember from 'ember';\nimport SearchLogic from 'ember-cli-admin/dsl/search';\nvar searchMixin;\n\nsearchMixin = Ember.Mixin.create({\n\n  isShowSearchForm: true,\n\n  searchForm: Ember.computed('model', 'q', {\n    get: function() {\n      var search = new SearchLogic().fromModel(this.get('q'), this.get('modelType'));\n      return search;\n    }\n  }),\n\n  actions: {\n    search: function() {\n      var query = this.get('searchForm').serialize();\n      this.setProperties({\n        page: 1,\n        q: Ember.$.param(query)\n      });\n    },\n\n    clearSearchForm: function() {\n      this.setProperties({\n        page: 1,\n        q: ''\n      });\n    }\n  }\n});\n\nexport default searchMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/sidebar.js":"import Ember from 'ember';\n\nvar sidebarMixin;\nsidebarMixin = Ember.Mixin.create({\n  isShowSidebar: true,\n  sidebarTitle: 'Sidebar',\n  sidebarContent: '<p>Some Content</p>'\n});\n\nexport default sidebarMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/sort.js":"import Ember from 'ember';\nimport Attributes from 'ember-cli-admin/dsl/attributes';\n\nvar sortMixin;\n\nsortMixin = Ember.Mixin.create({\n\n  sortFields: Ember.computed({\n    get: function() {\n      return Attributes.forSort(this.get('modelType'));\n    }\n  }),\n\n  actions: {\n    sort: function(fieldName) {\n      if (!this.get('sortFields').contains(fieldName)) {\n        return void 0;\n      }\n      if (this.get('sort') === fieldName) {\n        this.toggleProperty('orderAscending');\n      } else {\n        this.setProperties({\n          sort: fieldName,\n          orderAscending: true\n        });\n      }\n    }\n  }\n});\n\nexport default sortMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/table-view.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nimport BaseControllerMixin from 'ember-cli-admin/mixins/controllers/base';\nvar tableViewMixin;\n\ntableViewMixin = Ember.Mixin.create({\n  __table: true\n});\n\ntableViewMixin.reopen(BaseControllerMixin);\n\nexport default tableViewMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/controllers/tree-view.js":"import Ember from 'ember';\nimport BaseControllerMixin from 'ember-cli-admin/mixins/controllers/base';\nvar treeViewMixin;\n\ntreeViewMixin = Ember.Mixin.create({\n  __table: false,\n  __tree: true,\n  perPage: 100000,\n\n  catalogues: Ember.computed({\n    get: function() {\n      return this.get('store').query('catalogue', {});\n    }\n  }),\n\n  roots: Ember.computed('model.items.[]', {\n    get: function() {\n      if (!this.get('model.items')) {\n        return [];\n      }\n      return this.get('model.items').filter(function(item) {\n        return Ember.isEmpty(item.get('parent_id'));\n      });\n    }\n  }),\n\n  actions: {\n    rebuildAction: function(itemObject, prevId, nextId, parentId) {\n      var properties = {\n        parent_id: parentId,\n        prev_id: prevId,\n        next_id: nextId,\n        id: itemObject.get('id')\n      };\n\n      var data = {\n        type: 'POST',\n        dataType: 'json',\n        url: itemObject.get('rebuildUrl'),\n        data: properties,\n        beforeSend: function() {\n          Ember.$('.sortable_tree i.handle').hide();\n        },\n        success: function() {\n          Ember.$('.sortable_tree i.handle').show();\n        }\n      };\n\n      Ember.$.ajax(data);\n    }\n  }\n});\n\ntreeViewMixin.reopen(BaseControllerMixin);\n\nexport default treeViewMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/base.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nimport PaginationMixin from 'ember-cli-admin/mixins/routes/pagination';\nimport ModelMixin from 'ember-cli-admin/mixins/routes/model';\nimport ControllerMixin from 'ember-cli-admin/mixins/routes/controller';\nimport RenderMixin from 'ember-cli-admin/mixins/routes/render';\nimport SetupControllerMixin from 'ember-cli-admin/mixins/routes/setup-controller';\nimport ModalMixin from 'ember-cli-admin/mixins/routes/modal';\nimport QueryParams from 'ember-cli-admin/mixins/routes/query-params';\nvar mainRouteMixin;\n\nmainRouteMixin = Ember.Mixin.create();\n\nmainRouteMixin.reopen(QueryParams, PaginationMixin, ModelMixin, ControllerMixin, SetupControllerMixin, RenderMixin, ModalMixin);\n\nexport default mainRouteMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/controller.js":"import Ember from 'ember';\nimport Breadcrumbs from 'ember-cli-admin/logics/breadcrumbs';\nimport SiteTitle from 'ember-cli-admin/logics/site-title';\n\nexport default Ember.Mixin.create({\n  getOutlet: function(controller, outletName) {\n    var outlet = `${Ember.String.decamelize(this._controllerName(controller))}/${outletName}`;\n    if (this._getRegistry().has(`template:${outlet}`)) {\n      return outlet;\n    }\n    if (this._getRegistry().has(`template:admin/${outletName}`)) {\n      return `admin/${outletName}`;\n    }\n    return `admin/${outletName}`;\n  },\n\n  _getRegistry() {\n    if (this.container._registry) {\n      return this.container._registry;\n    }\n    return this.container.registry;\n  },\n\n  _getControllerTemplate: function(controller) {\n    var name;\n    name = this._controllerName(controller);\n\n    if (this._isLoading(name) || this._isError(name)) {\n      if (this._getRegistry().has(`template:${name}`)) {\n        return name;\n      }\n      if (this._isLoading(name)) {\n        return \"admin/loading\";\n      }\n      if (this._isError(name)) {\n        return \"admin/error\";\n      }\n    }\n    if (this.action) {\n      name = `${name}/${this.action}`;\n    }\n    if (name === \"dashboard\") {\n      return \"admin/dashboard\";\n    }\n    if (this._getRegistry().has(`template:${name}`)) {\n      return name;\n    } else {\n      if (this.action && this.action !== \"page\") {\n        return `admin/${this.action}`;\n      } else {\n        return \"admin/main\";\n      }\n    }\n  },\n\n  _controllerName: function(controller) {\n    return this.controllerName || (this.controllerName = controller._debugContainerKey.split(\":\")[1].replace(/(\\/[Ss]how)|(\\/[Ee]dit)|(\\/[Nn]ew)/, ''));\n  },\n\n  _isLoading(name) {\n    return name.match(/loading/);\n  },\n\n  _isError(name) {\n    return name.match(/error/);\n  },\n\n  _setActiveRoute: function(controller) {\n    var url;\n    url = this._controllerName(controller);\n    return this.controllerFor(\"navigation\").set('activeMenu', url);\n  },\n\n  _setAction: function(action) {\n    if (action !== \"index\") {\n      return this.action = action;\n    }\n  },\n\n  _checkAction: function(options, target) {\n    if (/\\./.test(target)) {\n      target = target.split(\".\")[1];\n      if (target) {\n        return options.action = target;\n      }\n    }\n  },\n\n  _setupBreadscrumbs: function(controller, model) {\n    return Breadcrumbs.setup(this.action, controller, model, this.controllerFor('breadcrumbs'));\n  },\n\n  _setSiteTitle: function(controller, model) {\n    return SiteTitle.setup(this._controllerName(controller), model, this.action);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/elasticsearch.js":"import Ember from 'ember';\nimport SearchLogic from 'ember-cli-admin/dsl/search';\n\nexport default Ember.Mixin.create({\n  pagination: function(modelName, params){\n    var json = {};\n    json = this._queryElasticsearch(json, new SearchLogic().deserializer(params.q));\n    json = this._paginationParams(json, params);\n    json = this._sort(json, params);\n    return this.store.find(modelName, json);\n  },\n\n  // json - {}\n  // params - query params\n  _queryElasticsearch: function(){\n\n  },\n\n  _paginationParams: function(query, params){\n    return Ember.$.extend({size: params.perPage, from: (params.page - 1)*params.perPage}, query);\n  },\n\n  _sort: function(query, params){\n    if(!params.sort){\n      return query;\n    }\n    var sort = {};\n    var order = params.orderAscending ? 'asc' : 'desc';\n    sort[params.sort] = {order: order};\n    query.sort = [sort];\n    return query;\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/modal.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nvar modalMixin;\n\nmodalMixin = Ember.Mixin.create({\n  actions: {\n    openModal: function(item, modalName) {\n      if (modalName == null) {\n        modalName = 'admin.base.confirm-modal';\n      }\n      this.set('controller.modalObject', item);\n      return this.render(modalName, {\n        outlet: \"modal\",\n        controller: this.get('controller')\n      });\n    },\n    openImagePreview: function(url) {\n      this.set('controller.previewImageUrl', url);\n      return this.render('admin.base.image-preview-modal', {\n        outlet: \"modal\",\n        controller: this.get('controller')\n      });\n    },\n    confirm: function(modal) {\n      var modelObject;\n      modelObject = modal || this.get('controller.modalObject');\n      if (modelObject.get('options').batch) {\n        this.get('controller').send('baseBatchAction', modelObject.get('actionData.action'));\n      } else {\n        if(modelObject.get('options').withOptions){\n          this.get('controller').send(modelObject.get('actionData.action'), modelObject.get('options'));\n        }\n        else{\n          this.get('controller').send(modelObject.get('actionData.action'), modelObject.get('model'));\n        }\n      }\n      return this.send('closeModal');\n    },\n    closeModal: function() {\n      this.set('controller.modalItem', null);\n      return this.disconnectOutlet({\n        outlet: \"modal\"\n      });\n    }\n  }\n});\n\nexport default modalMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/model.js":"import Ember from 'ember';\nvar modelMixin;\n\nmodelMixin = Ember.Mixin.create({\n  model: function(options, transition) {\n    this.action = undefined;\n    this.page = undefined;\n    this.perPage = undefined;\n    this.modelName = this._modelName(transition.targetName);\n\n    this.page = (options != null ? options.page : void 0) || 1;\n    this.perPage = (options != null ? options.perPage : void 0) || 25;\n    this.q = (options != null ? options.q : void 0);\n    this.sort = (options != null ? options.sort : void 0);\n    this.orderAscending = (options != null ? options.orderAscending : void 0);\n    this._checkAction(options, transition.targetName);\n    if (options.action) {\n      this._setAction(options.action);\n    }\n    if (!this.container.lookupFactory('model:' + this.modelName)) {\n      if (this.modelName.match(/dashboard/) || this.modelName.match(/index/) || this.modelName.match(/application/)) {\n        return;\n      }\n      return Ember.RSVP.reject('No model was found');\n    }\n    if (this.store.modelFor(this.modelName)) {\n      return this._find_model(this.modelName, options);\n    }\n  },\n  _find_model: function(modelName, options) {\n    if (options.action === \"new\") {\n      return this.store.createRecord(modelName, {});\n    }\n    if (!options.id) {\n      var findOptions = {\n        page: this.page,\n        perPage: this.perPage,\n        orderAscending: this.orderAscending\n      };\n      if(!Ember.isEmpty(this.q)){\n        findOptions.q = this.q;\n      }\n      if(!Ember.isEmpty(this.sort)){\n        findOptions.sort = this.sort;\n      }\n      return this.pagination(modelName, findOptions);\n    }\n    return this.store.find(modelName, options.id);\n  },\n  _setModel: function(controller, model) {\n    if (!model) {\n      return;\n    }\n    if (model.type) {\n      return controller.set('model', Ember.Object.create({\n        items: model,\n        __list: true,\n        total: model.meta.total\n      }));\n    }\n    return controller.set('model', model);\n  },\n  _modelName: function(name) {\n    if (/\\./.test(name)) {\n      name = name.split(\".\")[0];\n    }\n    return Ember.String.singularize(name);\n  }\n});\n\nexport default modelMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/pagination.js":"import Ember from 'ember';\nvar paginationMixin;\n\npaginationMixin = Ember.Mixin.create({\n  pagination: function(modelName, params) {\n    return this.store.query(modelName, params);\n  }\n});\n\nexport default paginationMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/query-params.js":"import Ember from 'ember';\n\nexport default Ember.Mixin.create({\n  queryParams: {\n    page: {\n      refreshModel: true\n    },\n    perPage: {\n      refreshModel: true\n    },\n    q: {\n      refreshModel: true\n    },\n    sort: {\n      refreshModel: true\n    },\n    orderAscending: {\n      refreshModel: true\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/render.js":"import Ember from 'ember';\nvar renderMixin;\n\nrenderMixin = Ember.Mixin.create({\n  renderTemplate: function(controller, model) {\n    this._setActiveRoute(controller);\n    this._setupBreadscrumbs(controller, model);\n    this.render(this._getControllerTemplate(controller), {\n      outlet: \"main\",\n      controller: controller\n    });\n    if (!(this._isLoading(this.controllerName) || this._isError(this.controllerName))) {\n      this._renderNavigation(controller, model);\n      this.controllerFor('breadcrumbs').set('resource', model);\n      this._renderBreadcrumbs(controller, model);\n      this._renderActions(controller, model);\n      this._renderSearchForm(controller);\n      this._renderSidebar(controller);\n      this._renderForm(controller, model);\n    }\n  },\n  _renderNavigation: function() {\n    return this.render('admin/navigation', {\n      outlet: 'navigation',\n      controller: 'navigation'\n    });\n  },\n  _renderBreadcrumbs: function() {\n    return this.render('admin/breadcrumbs', {\n      outlet: 'breadcrumbs',\n      controller: 'breadcrumbs'\n    });\n  },\n  _renderActions: function(controller, model) {\n    if (model) {\n      return this.render('admin/actions', {\n        outlet: 'actions',\n        controller: controller\n      });\n    }\n  },\n  _renderForm: function(controller) {\n    if (this.get('action') && (this.get('action') === \"edit\" || this.get('action') === \"new\") && this._getControllerTemplate(controller).split('/').length < 3) {\n      return this.render(this.getOutlet(controller, 'form'), {\n        into: `admin/${this.get('action')}`,\n        outlet: 'form',\n        controller: controller\n      });\n    }\n  },\n\n  _renderSearchForm: function(controller) {\n    return this.render(this.getOutlet(controller, 'search'), {\n      into: this._getControllerTemplate(controller),\n      outlet: 'search',\n      controller: controller\n    });\n  },\n\n  _renderSidebar: function(controller) {\n    return this.render(this.getOutlet(controller, 'sidebar'), {\n      into: this._getControllerTemplate(controller),\n      outlet: 'sidebar',\n      controller: controller\n    });\n  }\n});\n\nexport default renderMixin;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/routes/setup-controller.js":"import Ember from 'ember';\nimport Attributes from 'ember-cli-admin/dsl/attributes';\n\nexport default Ember.Mixin.create({\n  setupController: function(controller, model) {\n    var type;\n    this._setSiteTitle(controller, model);\n    if (model) {\n      this._setModel(controller, model);\n      type = model.type || model.constructor;\n      controller.set('modelAttributes', Attributes.detect(type));\n      controller.set('modelType', type);\n      return controller.set('batches', Ember.A());\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-admin/node_modules/ember-cli-admin/addon/mixins/views/confirmation.js":"// Generated by CoffeeScript 1.8.0\nimport Ember from 'ember';\nvar confirmationMixin;\n\nconfirmationMixin = Ember.Mixin.create({\n  _showConfirmation: function(options) {\n    var action;\n    if (options == null) {\n      options = {};\n    }\n    action = this.get('action') || this.get('actionName');\n    return this.sendAction(this.get('adminAction'), 'openModal', this._createConfirmationObject(action, options));\n  },\n\n  _createConfirmationObject: function(action, options){\n    return Ember.Object.create({\n      actionData: action,\n      model: this.get('model'),\n      options: options\n    });\n  }\n});\n\nexport default confirmationMixin;\n"}